package com.fitness_ua.LocalService;

import com.fitness_ua.Configuration.ApiData;
import com.fitness_ua.Configuration.ClubData;
import com.fitness_ua.Configuration.Utils;
import com.fitness_ua.DataProvider.AttendanceRepository;
import com.fitness_ua.DataProvider.AttendanceRepositoryImpl;
import com.fitness_ua.DataProvider.DB;
import com.fitness_ua.DataProvider.DBConfig;
import com.fitness_ua.DataProvider.model.Attendance;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.json.JSONArray;
import org.json.JSONObject;

import java.util.*;

/**
 * Created by kuro on 14.07.15.
 */
public class Synchronizer {
    private static final Logger logger = LogManager.getLogger(Synchronizer.class);

    private AttendanceRepository repository;
    private Configurator conf;
    private ApiData apiData;
    private ClubData clubData;
    private Gson gson;

    public Synchronizer(Configurator conf) {
        apiData = conf.props.getApiData();
        clubData = conf.props.getClubData();
        this.conf = conf;
        gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation()
                .registerTypeAdapter(Date.class, new JSONDateFormatter())
                .setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'")
                .create();
        DBConfig dbConfig = new DBConfig();
        dbConfig.dbFilePath = conf.props.getAppData().getDbFilePath();
        DB.init(dbConfig);
        repository = DB.attendances;
    }

    public SynchronizerResponse synchronizeAttendancies()  {
        logger.debug("Enter Synchronizer.synchronizeAttendancies");
        List<Attendance> unsync = repository.getAttendance(false);
        logger.info("To synchronize: " + unsync.size() + " attendencies.");

        if (unsync.size() == 0)
            return new SynchronizerResponse();


        //prepare json
        String jsonAttendencies = gson.toJson(unsync);

        String url = conf.props.getAppData().getRemoteUrl() + apiData.getClubsListUrl() + "/" +  clubData.getId() + "/visits/sync";
        logger.info("Synchronize with url: " + url + " for club " + clubData.getId() + ". Wait for connection to main server.");
        String strResponse = Utils.getUrlWithBasic(url,apiData.getLogin(),apiData.getPassword(),jsonAttendencies);

        logger.info("Connection to main server is well.");

        //we can't check which exactly atts wasn't syncrnzd, so set all to "sync"
        repository.setSyncAttendance(unsync, true);

        //prepare response
        SynchronizerResponse jsonResponse = prepareResponse(strResponse);

        logger.info(jsonResponse.synced + " synchronized, " + jsonResponse.errorsCount + " errors.");
        for (ListIterator<String> iterator = jsonResponse.errors.listIterator(); iterator.hasNext(); )
            logger.info("Synchronization error : " + iterator.next());
        logger.debug("Leave Synchronizer.synchronizeAttendancies");

        return jsonResponse;
    }

    public SynchronizerResponse prepareResponse(String strResponse) {
        logger.debug("Enter Synchronizer.prepareResponse");

        JSONObject jsonResponse = new JSONObject(strResponse);
        SynchronizerResponse response = new SynchronizerResponse();
        response.synced = jsonResponse.getInt("synced");
        response.errorsCount = jsonResponse.getInt("errorsCount");
        response.errors = new ArrayList<String>();
        JSONArray jsonErrorsArray = jsonResponse.getJSONArray("errors");
        for (int i = 0; i < jsonErrorsArray.length(); i++)
            response.errors.add(jsonErrorsArray.getString(i));

        logger.debug("Leave Synchronizer.prepareResponse");
        return response;
    }

    public void saveMessage(Message msg) {
        Attendance attendance = new Attendance();
        QRData qr = msg.message;

//        attendance.id = id;  // TODEL: reason - id is not unique, id field is auto generated by db engine
        //qr data
        attendance.abonementId  = qr.abonnementId;
        attendance.cardId = qr.cardId;
        attendance.clientId = qr.clientId;
        attendance.serviceId = qr.subscriptionId;
        attendance.name = qr.fullname;

        attendance.time = msg.time;

        attendance.sync = false;

        repository.registerAttendance(attendance);
    }
}
